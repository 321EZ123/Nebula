---
import Logo from "@components/Logo.astro";
import Layout from "@layouts/Layout.astro";
import { getLangFromUrl, useTranslations } from "../../i18n/utils";
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
import { VERSION } from "astro:env/client";
---

<Layout title="Home">
  <div class="flex flex-wrap mt-16 justify-center content-center w-full bg-primary fixed inset-0 h-[calc(100%-4rem)] z-0 flex-col items-center">
    <div class="w-full flex flex-col justify-center items-center content-center h-2/4">
      <div class="flex flex-row items-center mb-8">
        <div class="h-32 w-32 fill-navbar-text-color">
          <Logo />
        </div>
        <h1 class="font-roboto whitespace-nowrap text-navbar-text-color sm:visible text-5xl sm:text-7xl roboto">
          nebula.
        </h1>
      </div>
      <input
        id="nebula-input"
        class="transition-all duration-300 font-roboto h-14 rounded-t-2xl w-10/12 rounded-b-2xl border border-input-border-color bg-input p-2 text-center text-xl text-input-text placeholder:text-input-text roboto focus:outline-none md:w-3/12"
        placeholder={t("home.placeholder")}
      />
      <div
        id="omnibox"
        class="hidden p-1 transition-all duration-300 flex flex-col w-10/12 md:w-3/12 h-full flex-grow bg-input text-center items-center rounded-b-2xl border-input-border-color border-b border-r border-l"
      >
      </div>
    </div>
    <iframe
      id="neb-iframe"
      class="hidden z-100 w-full h-full absolute top-0 bottom-0 bg-primary"
      src="/loading"></iframe>
    <div
      id="version"
      class="flex flex-row w-full absolute bottom-4 pr-4 pl-4 text-text-color h-6 justify-between font-roboto"
    >
      <p>Version: {VERSION}</p>
      <p>&copy; Nebula Services 2024</p>
    </div>
  </div>
</Layout>
<script>
    import { EventHandler } from "@utils/events";
    import { SupportedSites, SearchEngines, SettingsVals } from "@utils/values";
    import { search, Elements } from "@utils/index";
    import { BareClient } from "@mercuryworkshop/bare-mux";
import { defaultStore } from "@utils/storage";

    type Suggestion = {
        phrase: string;
    };

    const init = async (): Promise<void> => {
        const bc = new BareClient();
        const se = Elements.select([
            { type: 'id', val: 'nebula-input' },
            { type: 'id', val: 'omnibox' },
            { type: 'id', val: 'version' },
            { type: 'id', val: 'neb-iframe' }
        ]);

        const input = Elements.exists<HTMLInputElement>(await se.next());
        const omnibox = Elements.exists<HTMLDivElement>(await se.next());
        const copyright = Elements.exists<HTMLDivElement>(await se.next());
        const iframe = Elements.exists<HTMLIFrameElement>(await se.next());
        input.addEventListener("keypress", async (event: any) => {
            if (event.key === "Enter") {
                copyright.classList.add("hidden");
                if (defaultStore.getVal(SettingsVals.proxy.proxy.key) === SettingsVals.proxy.proxy.available.automatic) {
                    switch(SupportedSites[input.value]) {
                        case "uv":
                            iframe.classList.remove("hidden");
                            iframe.src = `${__uv$config.prefix}${__uv$config.encodeUrl!(
                                search(
                                    input.value, 
                                    defaultStore.getVal(SettingsVals.proxy.searchEngine)
                                    ? SearchEngines[defaultStore.getVal(SettingsVals.proxy.searchEngine)] 
                                    : SearchEngines.ddg
                                ))}
                            `
                            break;
                        case "sj":
                            const { sj } = await window.sw.getSWInfo();
                            iframe.classList.remove("hidden");
                            iframe.src = sj.encodeUrl(
                                search(
                                    input.value,
                                    defaultStore.getVal(SettingsVals.proxy.searchEngine) ? SearchEngines[defaultStore.getVal(SettingsVals.proxy.searchEngine)]: SearchEngines.ddg
                                )
                            );
                            break;
                    }
                }
            }
        }); 
    }

    new EventHandler({
        events: {
            "astro:page-load": async () => { 
                await init() 
            }
        },
        logging: true
    })
    .bind();
</script>
