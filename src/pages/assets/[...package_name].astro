---
const { package_name } = Astro.params;
import Layout from "@layouts/Layout.astro";
const response = await fetch(new URL("/api/packages/" + package_name, Astro.url));
const assetsJson = await response.json();
---

<Layout title="Package">
  <div class="flex flex-wrap mt-16 w-full fixed inset-0 h-[calc(100%-4rem)] z-0 bg-primary flex-col items-center content-center justify-center pb-64 roboto">
    {assetsJson.error ? (
        <h1 class="text-text-color text-3xl"> Unexpected error. Are you sure you typed the name right? </h1>
      ) : (
        <div class="flex flex-row items-center text-text-color bg-navbar-color rounded-2xl">
          {assetsJson.background_video ? (
            // Background video
            <video src={`/videos/${assetsJson.background_video}`} controls class="w-[44rem] h-[25rem] object-cover rounded-xl">
              Your browser does not support the video tag.
            </video>
          ) : assetsJson.backgroundImage ? (
            // Background image
            <div style={{backgroundImage: `url(/images/${assetsJson.backgroundImage})`}} class="w-[44rem] h-[25rem] bg-cover bg-center rounded-xl"/>
          ) : (
            // Fallback to cover image
            <img src={`/images/${assetsJson.image}`} alt={assetsJson .title} class="w-[44rem] h-[25rem] object-cover rounded-xl"/>
          )}
          <div class="flex flex-col ml-7 p-16">
            <div class="text-xl">{assetsJson.type}</div>
            <div class="text-4xl roboto font-semibold">{assetsJson.title}</div>
            <div class="text-xl">
              By <strong>{assetsJson.author}</strong>
            </div>
            <div class="text-xl">{assetsJson.description}</div>
            <button class="bg-primary text-text-color border border-transparent rounded-lg px-6 py-3 hover:bg-navbar-color transition-colors duration-300 mt-9" id="install">
              Install
            </button>
          </div>
        </div>
      )
    }
  </div>
  <script is:inline define:vars={{ assetsJson, package_name }}>
    // determine if this is installed
    let items = JSON.parse(localStorage.getItem("installed_themes")) || [];

    const packageExists = items.indexOf(package_name) !== -1;

    if (packageExists) {
      document.getElementById("install").textContent = "Uninstall";
    }

    document.getElementById("install").addEventListener("click", install);
    function install() {
      if (packageExists) {
        const index = items.indexOf(package_name);
        items.splice(index, 1);
        localStorage.setItem("installed_themes", JSON.stringify(items));

        localStorage.removeItem("background_video");
        localStorage.removeItem("background_image");
        localStorage.removeItem("stylesheet");
        location.reload();
      } else {
        console.log("Package does not exist in the items array.");
        let installedThemes = localStorage.getItem("installed_themes");

        if (installedThemes) {
          // If it exists, append it
          installedThemes = JSON.parse(installedThemes);
          installedThemes.push(package_name);
        } else {
          // If it doesn't exist, create a new array
          installedThemes = [package_name];
        }

        localStorage.setItem(
          "installed_themes",
          JSON.stringify(installedThemes)
        );

        if (assetsJson.background_video) {
          localStorage.setItem(
            "background_video",
            assetsJson.background_video
          );
        } else {
          localStorage.removeItem("video");
        }
        if (assetsJson.background_image) {
          localStorage.setItem(
            "background_image",
            assetsJson.background_image
          );
        } else {
          localStorage.removeItem("background_image");
        }
        if (assetsJson.type == "theme") {
          localStorage.setItem("stylesheet", "/styles/" + assetsJson.payload);
        }
        location.reload();
      }
    }
  </script>
</Layout>
